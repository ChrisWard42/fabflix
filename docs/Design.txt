
== Design Principles ==

- Structure / Content... belongs in the JSP files as HTML5 structure with JSTL content
- Style / Format... belongs in CSS style sheets in /resources/css folder
- Client-side Interactivity... belongs in JS files in /resources/js folder
- Server-side Interactivity... is handled by Java servlets
- Traffic filtering... is handled by Java filter servlets
- Data definitions... are in Java "bean" classes stored in Beans package

== Managing Servlets ==

Login (url: /login)
	- Logo
	- Login Form
		- Username field
			- Email is the username currently
		- Password field
			- Should also implement password hashing DB-side and client-side then match hashes, but
				this is of secondary priority
		- Log In button
			- Takes username/password and checks the database for the combination
			- If a match is found, a session is created for the user and sent to Home page
		- Register button (Optional / Deferred implementation)
			- Initially: Either a button that does nothing or pops up a dialog saying registration currently
				disabled but you can login if you have an account.
				- For what I mean by popup, see IMDB.com logged out and click on Login in upper right. The source code
					uses this JQuery/JS snippet I believe:
						jQuery(document).ready(function(){
							window.imdb.login_lightbox("https://secure.imdb.com",
										   "https://secure.imdb.com/register-imdb/form-v2?ref_=nv_usr_reg_2");
						});
			- Later on some form of Register servlet can handle signing up a user and adding it to database
		- Remember Me checkbox (Optional / Deferred implementation)
			- Unchecked by default
			- If checked by user, stores a long lasting cookie in the browser rather than a session cookie
			- If not checked, stores session cookie which is removed on browser close

Home (url: /home, url: /)
	- Banner Slideshow (Optional / Deferred implementation)
		- See: Amazon.com home page
		- Fill it with junk about movies just as a visual placeholder so page doesn't seem empty
	- Featured Movie(s) (Optional / Deferred implementation)
		- See: Twitch.com Featured Games section
		- Displays a box containing one row of featured movies (trimmed to screen width)
		- Each movie only shows image/title and clicking an image calls the Movie servlet
		- Can implement with a static list initially, later can store # times hit by search query in
			last week server-side and populate it based on that.
	- Featured Star(s) (Optional / Deferred implementation)
		- Same as Featured Movies design above, picture of star and link, link calls the Star servlet.
		
Search (url: /search)
	- URLs Like: /search?
		(Need param pass list)
	- Global Search Bar
		- Sending a query with "All" dropdown selected (default) queries LIKE '%query%' OR LIKE '%query%' etc.
			for Movie fields: title, year, director, and star
		- Sending a query with "Title", "Year", "Director", or "Star" selected sends a query on only that 
			Movie field.
	- Search Dropdown Box
		- Collapses/expands, with default expanded
		- Provides input boxes for "Title", "Year", "Director", and "Star", with a "Search" button that confirms
			the inputs.
		- Searching through this part of the page is an AND query on all of the fields.
	- Movie List View
		- Contained. See Movie List View spec under Included Servlets.
	- Notes on Backend
		- For searches where "Star" is included, needs to do the dynamic first name / last name lookup like we
			did in project 1.
		- It probably makes sense to have some sort of MovieInfo class built on top of the Movie java bean which
			combines the info with a movie joined with its stars (from stars and stars_in_movies) and genres
			(from genres and genres_in_movies). That way can just access a MovieInfo.stars attribute and no 
			higher level classes have to know the tables are separate.
		- Most likely want to have a parameter sent by the various search methods that is checked in this module
			so can split up the different queries.
				- Ex: if (param("source") == "global_all") ... Do OR query on the single input
					  if (param("source") == "adv_search") ... Do AND query on the null/provided inputs
					  etc.

Browse (url: /browse)
	- URLs Like: /browse?
		(Need param pass list)
	- Global Browse Link
		- Sends user to the Browse page with initial display being all movies
	- Browse by Genre dropdown box
		- Provides clickable links which constrain the titles shown to only those in that genre. Sends genre 
			clicked as param to search.
		- Once a link is clicked it should be shown as selected on the page (bold)
		- See design mockup, genres included hardcoded to: Action, Adventure, Animation, Comedy,
			Crime, Drama, Family, Fantasy, Foreign, Horror, Musical, Mystery, Romance, Science Fiction,
			Thriller, and War.
		- Can only have one genre or letter selected at a time, so clicking a new one removes prev selection.
	- Browse by Title dropdown box
		- Provides clickable links which constrain the titles shown to only those which start with that letter.
			Sends letter as param to search.
		- Once a link is clicked it should be shown as selected on the page (bold).
		- See design mockup for layout idea. Need 0-9 and A-Z all separate.
		- Can only have one genre or letter selected at a time, so clicking a new one removes prev selection.
	- Movie List View
		- Contained. See Movie List View spec under Included Servlets.

Movie (url: /movie)
	- URLs Like: /movie/movie-id (ex: /movie/839541)
	- Movie Info
		- Movie page is essentially just a blown up and spread out version of the MovieInfo element in Movie List
			view. Should have id, title, year, director, genre list (linked to Browse by genres page w/ it selected),
			banner url (displayed as a large image, replace m with f for large version),
			star list (linked to Star page), and trailer url (link).
		- Also needs an "Add to Shopping Cart" button. Ideally this would trigger a JS element indicating that the
			item has been added to the cart and providing a link to view cart or checkout, similar to Amazon, but
			this is secondary functionality.
		- Main thing for design is just to use up all of the horizontal space on the page and more vertical space
			than in the MovieList view.

Star (url: /star)
	- URLs Like: /star/star-id (ex: /star/738291)
	- Star Info
		- Star page displays id, name, date of birth, photo url (displayed as a picture of the star), and a list of
			movies in which the star has acted (join of stars + stars_in_movies + movies tables, with links to
			the corresponding movie page).
		- Should be similar in visual size to the single movie page so that clicking back and forth between them
			isn't a jarring transition.

Cart (url: /cart)
	- Just look at other online retailer shopping carts for inspiration on design.
	- It needs to show all of the items the user has put in the cart, so they need to be saved in the Session across pages.
	- Should display the current number of copies of each item and allow user to update, using either an input box or a
		dropdown menu. The former requires an "update quantities" style button somewhere, while the latter could save the
		quantity to session once an item in the dropdown is clicked.
	- Need a way to delete the item from the cart, probably just a delete link below each item. Delete link should remove
		the item from the page and the session variable without redirecting to a different page.
	- Should have a "Proceed to checkout" button which directs to the Checkout page when clicked.

Checkout (url: /checkout)
	- Checkout Information
		- Has input boxes for credit card number, expiration date, first name, and last name, with a "Complete Purchase" button.
		- All of the credentials must match an entry in the credit card table. If there's not an exact match (no LIKE here) then
			the transaction fails and the user should be prompted an error message indicating the credentials were wrong.
		- If the credentials are correct, the items previously in the cart need to be removed from the session object, and the user
			either redirected to a confirmation page, or a confirmation page popped up in-page and then a redirect to home page 
			issued when it's closed.
		- Probably ideal to also ensure that the customer information matches the current session, but need to review the model to
			be sure this is a valid constraint.

== Included Servlets ==

Header (url: /head, properties: no-web-access)
	- The header includes the following discrete components and is included on every page:
		- Fabflix Logo
			- Positioned in the upper left portion of header
			- Clicking on the logo sends the user to the main page
		- Search Bar
			- Centered in the header
			- Typing an item into the search bar runs Search servlet with an OR query on all fields
			- (Optional) Dropdown box with "All" initially selected, but can select the other query fields to narrow search
		- Browse
			- Link to the right of search bar
			- Clicking it runs Browse servlet with Genre/Title collapsed and shows a Movie List of all movies initially
		- Account (Deferred implementation)
			- Needs to be room for an Account link to show the user's account page, leftmost along right hand side
		- Cart
			- Link/Image on right hand side of header which runs Cart servlet taking user to current shopping cart
		- Log Out (Optional / Deferred implementation)
			- Link rightmost in header should log user out and send to Login servlet
			
Footer (url: /foot, properties: no-web-access)
	- The footer includes the following discrete components and is included on every page:
		- Fabflix mini-logo + "A Jamshid company."
			- left-aligned
		- Copyright (c) Benla, Chris, Stevo
			- right-aligned

Movie List (url: /movie-list, properties: no-web-access)
	- Fed a list of Movie or MovieInfo objects which are the result of the string of query parameters sent
		to the backend.
	- Required to display: id, title (w/ link to Movie page for title), year, director, list of genres,
		list of stars (w/ link to Star page for each star), banner url (as photo), trailer url (as link).
	- Also needs an "Add to Shopping Cart" button on each movie in the list. Ideally this would trigger a JS element
		indicating that the item has been added to the cart and providing a link to view cart or checkout, similar to
		Amazon, but this is secondary functionality.
	- Requires ability to sort the list object based on Title (asc/desc) and Year (asc/desc). If done with
		SQL consider using ORDER BY.
	- Requires ability to select number of pages to display. Can constrain to 10, 25, and 50. Pass as a 
		parameter in url and enforce using SQL LIMIT statement.
	- Requires ability to move from page to page (prev/next). Hitting one should modify the OFFSET attribute
		of the query.
		- Additionally, hitting prev on page 1 or next on last page should not be selectable, otherwise errors
			will result.
		- Optionally can have a page listing along the bottom like is done with google search results.
	- First iteration of this functionality can do new queries to the server for each change, though ideally
		we want to move as much to client-side JS/AJAX as possible so it happens in-page.

== Filter Servlets ==

Authentication (url: /auth, properties: no-web-access)
	- If the user doesn't have an active session (isn't currently logged in):
		- If the page is Login:
			- Do nothing, they're on the right page to authenticate so let the traffic pass through filter.
		- If the page is any other page on the site:
			- Redirect them to the Login page
	- If the user does have an active session (is logged in):
		- If the page is Login:
			- Redirect the user to the Home page
		- If the page is any other page on the site:
			- Do nothing, they're already logged in so let the traffic pass through filter.		
			