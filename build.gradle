import javax.tools.ToolProvider

// Special Buildscript Plugins
buildscript {
    repositories {
        jcenter()
    }
    
    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.2.2'   
    }
}

// Gradle Plugins
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.bmuschko.cargo'

// Repositories to look for dependencies
repositories {
    mavenLocal()
    mavenCentral()
}

// Wrapper task to generate ./gradlew
wrapper {
    gradleVersion = '2.13'
}

// JDK Version (from java plugin)
sourceCompatibility = 1.8

// Project Version (project property)
version = '1.0'

// Extra Properties (defined in gradle.properties so don't shadow cmd line)
/*
ext {
    wAN = "fabflix"
}
*/

configurations {
    webLibs
}

// Dependencies to run Cargo
dependencies {
    def cargoVersion = '1.4.5'
    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
          "org.codehaus.cargo:cargo-ant:$cargoVersion"

    compile fileTree(dir: 'src/main/webapp/WEB-INF/lib', include: '*.jar')
    testCompile 'junit:junit:4.12'
    //compile files(((URLClassLoader) ToolProvider.getSystemToolClassLoader()).getURLs())

    //compile 'mysql:mysql-connector-java:5.1.38'
    //compile 'org.apache.tomcat:tomcat-jsp-api:8.0.33'
    //compile 'org.apache.tomcat:tomcat-el-api:8.0.33'
    //compile 'org.apache.tomcat:tomcat-servlet-api:8.0.33'
}

// Java source sets for compilation

sourceSets {
    main {
        java {
            srcDir 'src/main/webapp/WEB-INF/sources'
        }

        output.classesDir = 'src/main/webapp/WEB-INF/classes'
    }
}

// Java compilation options
/*
compileJava {
    options.compilerArgs = ["-Xlint:unchecked"]
}
*/


// War file name
war {
    archiveName = wAN + ".war"
}

// Web app deployment (use with: cDR, cRR)
cargo {
    containerId = 'tomcat8x'
    port = 8080
    
    deployable {
        file = file("build/libs/" + wAN + ".war")
        context = wAN
    }
    
    // Primary Fabflix
    // remote {
    //     hostname = '50.18.81.254'
    //     username = 'build'
    //     password = 'detectivemcnulters'
    // }

    // Master Mirror
    // remote {
    //     hostname = '52.9.203.243'
    //     username = 'build'
    //     password = 'detectivemcnulters'
    // }

    // Slave Mirror
    remote {
        hostname = '52.9.218.72'
        username = 'build'
        password = 'detectivemcnulters'
    }
}

// Cleanup task to remove old build files so no accidental deploy of outdated stuff
task cleanWars(type: Delete) {
    delete "build"
}

// Task to check that we aren't quick deploying to live site
task checkLiveSite() << {
    if(project.property("wAN").toString().equals("live_site")) {
        throw new GradleException("Build failed. Do not run quick deploy on live site.")
    }
    if(project.property("wAN").toString().equals("fabflix")) {
        throw new GradleException("Do not deploy updates to fabflix while grading underway.")
    }
}

// Macro to run assemble, redeploy, and cleanup all in a row
task webAppDeploy(dependsOn: ['checkLiveSite', 'assemble', 'cargoRedeployRemote', 'cleanWars'])
assemble.mustRunAfter 'checkLiveSite'
cargoRedeployRemote.mustRunAfter 'assemble'
cleanWars.mustRunAfter 'cargoRedeployRemote'